import matplotlib.pyplot as plt
import numpy as np
from numpy import random
import math
from scipy.linalg import expm
from scipy.linalg import pinv
from tqdm import tqdm
import xlwt
import xlrd
import  dingyihanshu
import find_t

np.set_printoptions(threshold=100000)
gate_0 = xlrd.open_workbook(r'.\gate_0.xls')

sheet_0 = gate_0.sheet_by_index(0)

def import_excel_matrix(sheet):
  row = sheet.nrows # 行数
  col = sheet.ncols # 列数
  datamatrix = np.zeros((row, col)) # 生成一个nrows行*ncols列的初始矩阵
  for i in range(col): # 对列进行遍历
    cols = np.array(sheet.col_values(i)) # 把list转换为矩阵进行矩阵操作
    datamatrix[:, i] = cols # 按列把数据存进矩阵中
  return datamatrix

def C(i):
    c = import_excel_matrix(gate_0.sheet_by_index(i))
    c = np.reshape(c,(7,4,4))
    return c



#a_ideal = np.loadtxt(r"C:\Users\yangruyu\Desktop\gate1_ideal")
a_ideal = xlrd.open_workbook(r'.\ite_new.xls')
#a_ideal_0 = xlrd.open_workbook(r'.\ite_new.xls')
a_ideal = import_excel_matrix(a_ideal.sheet_by_index(0))
C_ideal_f = np.reshape(a_ideal,(7,4,4))
C_ideal_f_0 = np.reshape(a_ideal,(7,4,4))
#print(C_ideal_f[0])

def error_rate(X,Y):
    Y = (Y.T).conjugate()
    return 1-(np.trace(np.matmul(X,Y)) + 2 )/6

for i in range(7):
    print(error_rate(C(0)[i,:,:],C_ideal_f[i,:,:]))

def unital(X):
    return np.delete(np.delete(X,0,axis=0),0,axis=1)

def eqa4_i(i, j, k, l):
    X = np.matmul(np.matmul(unital(C_ideal_f_0[j,:,:]), unital(C_ideal_f_0[k,:,:])), unital(C_ideal_f_0[l,:,:]))
    U = []
    p = 0
    while p < 81:
        if p == i * 9 + 0:
            U.append(X[0, 0])
        elif p == i * 9 + 1:
            U.append(X[0, 1])
        elif p == i * 9 + 2:
            U.append(X[0, 2])
        elif p == i * 9 + 3:
            U.append(X[1, 0])
        elif p == i * 9 + 4:
            U.append(X[1, 1])
        elif p == i * 9 + 5:
            U.append(X[1, 2])
        elif p == i * 9 + 6:
            U.append(X[2, 0])
        elif p == i * 9 + 7:
            U.append(X[2, 1])
        elif p == i * 9 + 8:
            U.append(X[2, 2])
        else:
            U.append(0)
        p = p + 1
    return U


def eqa4_j(i, j, k, l):
    X = np.matmul(np.matmul(unital(C_ideal_f_0[k,:,:]), unital(C_ideal_f_0[l,:,:])), unital(C_ideal_f_0[i,:,:]))
    I = []
    p = 0
    while p < 81:
        if p == j * 9 + 0:
            I.append(X[0, 0])
        elif p == j * 9 + 1:
            I.append(X[0, 1])
        elif p == j * 9 + 2:
            I.append(X[0, 2])
        elif p == j * 9 + 3:
            I.append(X[1, 0])
        elif p == j * 9 + 4:
            I.append(X[1, 1])
        elif p == j * 9 + 5:
            I.append(X[1, 2])
        elif p == j * 9 + 6:
            I.append(X[2, 0])
        elif p == j * 9 + 7:
            I.append(X[2, 1])
        elif p == j * 9 + 8:
            I.append(X[2, 2])
        else:
            I.append(0)
        p = p + 1
    return I


def eqa4_k(i, j, k, l):
    X = np.matmul(np.matmul(unital(C_ideal_f_0[l,:,:]), unital(C_ideal_f_0[i,:,:])), unital(C_ideal_f_0[j,:,:]))
    O = []
    p = 0
    while p < 81:
        if p == k * 9 + 0:
            O.append(X[0, 0])
        elif p == k * 9 + 1:
            O.append(X[0, 1])
        elif p == k * 9 + 2:
            O.append(X[0, 2])
        elif p == k * 9 + 3:
            O.append(X[1, 0])
        elif p == k * 9 + 4:
            O.append(X[1, 1])
        elif p == k * 9 + 5:
            O.append(X[1, 2])
        elif p == k * 9 + 6:
            O.append(X[2, 0])
        elif p == k * 9 + 7:
            O.append(X[2, 1])
        elif p == k * 9 + 8:
            O.append(X[2, 2])
        else:
            O.append(0)
        p = p + 1
    return O


def eqa4_l(i, j, k, l):
    X = np.matmul(np.matmul(unital(C_ideal_f_0[i,:,:]), unital(C_ideal_f_0[j,:,:])), unital(C_ideal_f_0[k,:,:]))
    P = []
    p = 0
    while p < 81:
        if p == l * 9 + 0:
            P.append(X[0, 0])
        elif p == l * 9 + 1:
            P.append(X[0, 1])
        elif p == l * 9 + 2:
            P.append(X[0, 2])
        elif p == l * 9 + 3:
            P.append(X[1, 0])
        elif p == l * 9 + 4:
            P.append(X[1, 1])
        elif p == l * 9 + 5:
            P.append(X[1, 2])
        elif p == l * 9 + 6:
            P.append(X[2, 0])
        elif p == l * 9 + 7:
            P.append(X[2, 1])
        elif p == l * 9 + 8:
            P.append(X[2, 2])
        else:
            P.append(0)
        p = p + 1
    return P
A_0 = np.array([[1, 0, 0], [0, 0, 0], [0, 0, 0]])
A_1 = np.array([[0, 0, 0], [1, 0, 0], [0, 0, 0]])
A_2 = np.array([[0, 0, 0], [0, 0, 0], [1, 0, 0]])
A_3 = np.array([[0, 1, 0], [0, 0, 0], [0, 0, 0]])
A_4 = np.array([[0, 0, 0], [0, 1, 0], [0, 0, 0]])
A_5 = np.array([[0, 0, 0], [0, 0, 0], [0, 1, 0]])
A_6 = np.array([[0, 0, 1], [0, 0, 0], [0, 0, 0]])
A_7 = np.array([[0, 0, 0], [0, 0, 1], [0, 0, 0]])
A_8 = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 1]])





def A(i):
    if i == 0:
        return A_0
    elif i == 1:
        return A_1
    elif i == 2:
        return A_2
    elif i == 3:
        return A_3
    elif i == 4:
        return A_4
    elif i == 5:
        return A_5
    elif i == 6:
        return A_6
    elif i == 7:
        return A_7
    elif i == 8:
        return A_8



def C_measure(i):
    Z = np.matmul(B,Y)
    #print(A(1))
    #print(Z)
    Z = [Z[j] for j in range(9 * (i - 1), 9 * i)]
    D_4 = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])
    for j in range(9):
        D_4 = D_4 + Z[j] * A(j)
    M = (unital(C_ideal_f[i-1,:,:]) + D_4)
    print(D_4)
    return M

spam = np.delete(np.delete(find_t.gen_SPAM(),0,axis=0),0,axis=1)
#print(error_rate(find_t.gen_SPAM(),np.array([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])))
#print(find_t.gen_SPAM())
#print(find_t.gen_SPAM())
err = []
distance = []
def t_measure(i):
    t=np.array([S[3*(i-1)],S[3*(i-1)+1],S[3*(i-1)+2]])
    return t

def t_non(n,i):
    T_non = np.delete(C(n)[i-1,:,:],0,axis=0)[:, 0]
    T_non = np.array([[T_non[0]], [T_non[1]], [T_non[2]]])
    T_non = np.squeeze(np.asarray(T_non))
    T_non = T_non.reshape((3, 1))
    return T_non


equa_set = np.loadtxt(r"C:\Users\yangruyu\Desktop\gates_used.txt")

workbook = xlwt.Workbook(encoding = 'utf-8')
worksheet = workbook.add_sheet('duibi',cell_overwrite_ok=True)

error_single = []
distance_single = []
for n in range(10,11,1):
    re_times = 10
    Y = []
    U = []
    I = []
    O = []
    P = []
    Y_1 = []
    for raw in range(0, 100):
        i = int(equa_set[raw][0] - 1)
        j = int(equa_set[raw][1] - 1)
        k = int(equa_set[raw][2] - 1)
        l = int(equa_set[raw][3] - 1)
        U.extend(eqa4_i(i, j, k, l))
        I.extend(eqa4_j(i, j, k, l))
        O.extend(eqa4_k(i, j, k, l))
        P.extend(eqa4_l(i, j, k, l))
        Y.append(dingyihanshu.equa_right_meas(dingyihanshu.chengfa(unital(C(n)[i,:,:]),unital(C(n)[j,:,:]),unital(C(n)[k,:,:]),unital(C(n)[l,:,:])), dingyihanshu.chengfa(unital(C_ideal_f[i,:,:]),unital(C_ideal_f[j,:,:]),unital(C_ideal_f[k,:,:]),unital(C_ideal_f[l,:,:])),dingyihanshu.chengfa(unital(C_ideal_f_0[i,:,:]),unital(C_ideal_f_0[j,:,:]),unital(C_ideal_f_0[k,:,:]),unital(C_ideal_f_0[l,:,:])),n,2))
        Y_1.append(np.trace(dingyihanshu.chengfa(unital(C(n)[i,:,:]),unital(C(n)[j,:,:]),unital(C(n)[k,:,:]),unital(C(n)[l,:,:])))-np.trace(dingyihanshu.chengfa(unital(C_ideal_f_0[i,:,:]),unital(C_ideal_f_0[j,:,:]),unital(C_ideal_f_0[k,:,:]),unital(C_ideal_f_0[l,:,:]))))
        y = [Y[k] - Y_1[k] for k in range(len(Y))]
        #print(Y)
        # Y.append(measure(i+1,j+1,k+1,l+1))
        # print(raw,c[-1],Y[-1])
    D_1 = [U[i] + I[i] + O[i] + P[i] for i in range(0, len(U))]
    b = len(D_1) / 81
    s = int(b)
    D_1 = np.array(D_1)
    D_1 = D_1.reshape(s, 81)
    for i in range(0, 18):
        D_1 = np.delete(D_1, -1, axis=1)
    #print(D_1)
    B = np.linalg.pinv(D_1)
    #print(B)
    T, E, V = np.linalg.svd(B)
    #print(E)
    rank = np.linalg.matrix_rank(B)
    #print(rank)
    t = find_t.find_t(C_measure,C(n))
    #print(t)
    #print(C_measure(2))
    '''
    t13 = (C_measure(5) - unital(C(n)[4,:,:]) + C_measure(6) - unital(C(n)[5,:,:]))[0, 0] / 2
    t23 = (C_measure(5) - unital(C(n)[4,:,:]) + C_measure(6) - unital(C(n)[5,:,:]))[1, 0] / 2
    t12 = -(C_measure(5) - unital(C(n)[4,:,:]) + C_measure(6) - unital(C(n)[5,:,:]))[2, 1] / 2
    t21 = (C_measure(3) - unital(C(n)[2,:,:]) + C_measure(7) - unital(C(n)[6,:,:]))[2, 0] / 2
    t32 = -(C_measure(6) - unital(C(n)[5,:,:]) + C_measure(2) - unital(C(n)[1,:,:]))[2, 2] / 2
    t31 = (C_measure(6) - unital(C(n)[5,:,:]) + C_measure(2) - unital(C(n)[1,:,:]))[1, 0] / 2
    t22 = 0
    t33 = (C_measure(6) - unital(C(n)[5,:,:]) + C_measure(2) - unital(C(n)[1,:,:]))[1, 2] / 2
    t11 = -(C_measure(4) - unital(C(n)[3,:,:]) + C_measure(3) - unital(C(n)[2,:,:]))[1, 0] / 2
    t = np.array([[t11, t12, t13], [t21, t22, t23], [t31, t32, t33]])
    '''
    #print(C_ideal_f[0,:,:] - unital(C(n)[0,:,:]))
    #print(C_measure(1) - unital(C(n)[0, :, :]) - np.matmul(t,unital(C_ideal_f[0,:,:])) + np.matmul(unital(C_ideal_f[0,:,:]),t))

    Y_non = []
    P_non = []
    for i in tqdm(range(1, 8)):
        for j in range(i + 1, 8):
            #print(i, j)
            rep = int(1*re_times*10/(100*error_rate(np.matmul(C(n)[i - 1, :, :], C(n)[j - 1, :, :]),np.matmul(C_ideal_f[i - 1, :, :], C_ideal_f[j - 1, :, :]))))
            #rep = 10**re_times
            #print(error_rate(np.matmul(C(n)[i - 1, :, :], C(n)[j - 1, :, :]),np.matmul(C_ideal_f[i - 1, :, :], C_ideal_f[j - 1, :, :])))
            M_non_measure = np.matmul(unital(C(n)[i-1,:,:]), unital(C(n)[j-1,:,:]))
            M_acc_measure = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
            for l in range(1, rep):
                M_acc_measure = np.matmul(M_acc_measure, M_non_measure) + np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
            M_acc = np.delete(np.delete(find_t.GST(find_t.acc_n(np.matmul(C(n)[i - 1, :, :], C(n)[j - 1, :, :]), rep), i - 1, j - 1), 0, axis=0), 0, axis=1)
            V, E, U = np.linalg.svd(M_acc)
            # x=U
            T_non = np.delete(find_t.GST(find_t.acc_n(np.matmul(C(n)[i - 1, :, :], C(n)[j - 1, :, :]), rep), i - 1, j - 1), 0, axis=0)[:, 0]
            T_non = np.array([[T_non[0]], [T_non[1]], [T_non[2]]])
            T_non = np.squeeze(np.asarray(T_non))
            T_non = T_non.reshape((3, 1))
            #T_non = np.matmul(np.linalg.inv(spam),T_non)
            #print(T_non -np.matmul(np.linalg.inv(spam),T_non) )
            #print(T_non - np.matmul(M_acc_measure,t_non(n,i-1)+np.matmul(np.delete(np.delete(C(n)[i - 1, :, :], 0, axis=0), 0, axis=1),t_non(n,j-1))))
            V_measure, E, U_measure = np.linalg.svd(M_acc_measure)
            x = U_measure
            #T_non = np.matmul(spam, T_non)
            T_non = np.matmul(np.linalg.inv(V_measure), T_non)
            f = np.matmul(x, np.delete(np.delete(C(n)[i - 1, :, :], 0, axis=0), 0, axis=1))
            if E[0] > 1:
                #print(E[0])
                Y_non.append(T_non[0])
                for k in range(0, 21):
                    if k == 3 * (i - 1):
                        P_non.append(E[0] * x[0][0])
                    elif k == 3 * (i - 1) + 1:
                        P_non.append(E[0] * x[0][1])
                    elif k == 3 * (i - 1) + 2:
                        P_non.append(E[0] * x[0][2])
                    elif k == 3 * (j - 1):
                        P_non.append(E[0] * f[0][0])
                    elif k == 3 * (j - 1) + 1:
                        P_non.append(E[0] * f[0][1])
                    elif k == 3 * (j - 1) + 2:
                        P_non.append(E[0] * f[0][2])
                    else:
                        P_non.append(0)
    b = len(P_non) / 21
    s = int(b)
    D_n = np.array(P_non)
    D_n = D_n.reshape(s, 21)
    a_n = np.linalg.matrix_rank(D_n)
    T, E, V = np.linalg.svd(D_n)
    for i in range(0, len(E)):
        if i < 18:
            E[i] = E[i]
        else:
            E[i] = 0
    Eprime = np.array([[E[i] if i == j else 0 for i in range(0, 21)] for j in range(0, 21)])
    D = np.matmul(T, np.matmul(Eprime, V))
    # print(np.linalg.matrix_rank(D))
    B_n = np.linalg.pinv(D)
    S = np.matmul(B_n, Y_non)
    identity = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])

    Q1 = identity - np.delete(np.delete(C(n)[0,:,:], 0, axis=0), 0, axis=1)
    Q2 = identity - np.delete(np.delete(C(n)[1,:,:], 0, axis=0), 0, axis=1)
    Q3 = identity - np.delete(np.delete(C(n)[2,:,:], 0, axis=0), 0, axis=1)
    Q4 = identity - np.delete(np.delete(C(n)[3,:,:], 0, axis=0), 0, axis=1)
    Q5 = identity - np.delete(np.delete(C(n)[4,:,:], 0, axis=0), 0, axis=1)
    Q6 = identity - np.delete(np.delete(C(n)[5,:,:], 0, axis=0), 0, axis=1)
    Q7 = identity - np.delete(np.delete(C(n)[6,:,:], 0, axis=0), 0, axis=1)
    Q = np.vstack((Q1,Q2))
    Q = np.vstack((Q,Q3))
    Q = np.vstack((Q,Q4))
    Q = np.vstack((Q,Q5))
    Q = np.vstack((Q,Q6))
    Q = np.vstack((Q,Q7))
    #print(Q.shape)
    t_error = np.vstack((t_measure(1)-t_non(n,1),t_measure(2)-t_non(n,2)))
    t_error = np.vstack((t_error,t_measure(3)-t_non(n,3)))
    t_error = np.vstack((t_error, t_measure(4) - t_non(n, 4)))
    t_error = np.vstack((t_error, t_measure(5) - t_non(n, 5)))
    t_error = np.vstack((t_error, t_measure(6) - t_non(n, 6)))
    t_error = np.vstack((t_error, t_measure(7) - t_non(n, 7)))
    #print(t_error.shape)
    t_error = np.matmul(np.linalg.pinv(Q),t_error)
    #t = find_t.find_t(C(n),C_ideal_f)
    for i in range(7):
        matrix = np.hstack((t_measure(i+1) - np.matmul(identity-np.delete(np.delete(C(n)[i,:,:], 0, axis=0), 0, axis=1),t_error),C_measure(i+1)))
        matrix = np.vstack((np.array([[1,0,0,0]]),matrix))
        #print(matrix[3,3])
        #print(matrix)
        xiuz = np.matmul(t, unital(C_ideal_f[i, :, :])) - np.matmul(unital(C_ideal_f[i, :, :]), t)
        xiuz_to = np.hstack((np.array([[0],[0],[0]]),xiuz))
        xiuz_to = np.vstack((np.array([[0,0,0,0]]),xiuz_to))
        norm = np.linalg.norm(matrix-xiuz_to-C(n)[i,:,:],ord=2)
        #print(matrix-C(n)[i,:,:]-xiuz_to)
        #print(np.linalg.norm(C(n)[i,:,:]-C_ideal_f[i,:,:],ord=2))
        error_single.append(math.log10(np.linalg.norm(C(n)[i,:,:]-C_ideal_f[i,:,:],ord=2)))
        #error_single.append(re_times)
        #error_single = error_single + math.log10(error_rate(C(n)[i,:,:],C_ideal_f[i,:,:]))
        distance_single.append(math.log10(norm))
        #worksheet.write(i,n*4,i+1)
        #worksheet.write(i,n*4+1,error_single[-1])
        #worksheet.write(i,n*4+2,distance_single[-1])
        #error_single = error_single + math.log10(error_rate(C(n)[i,:,:],C_ideal_f[i,:,:]))
        #print(error_rate(matrix - xiuz_to,C(n)[i,:,:]))
        #distance_single = distance_single + math.log10(error_rate(matrix - xiuz_to,C(n)[i,:,:]))
        h,l = 4,4
        for h_0 in range(h):
            for l_0 in range(l):
                worksheet.write(4*i+h_0,l_0,(matrix)[h_0,l_0].real)

    #err.append(error_single/7)
    #distance.append(distance_single/7)


    #print(matrix - C(n)[i,:,:] - xiuz_to)
    #print(C(n)[i,:,:]-C_ideal_f[i,:,:])
workbook.save('ite_new.xls')
#print(B)
#print(Y)
#print(np.matmul(B,Y))
plt.scatter(error_single,distance_single)
plt.show()



