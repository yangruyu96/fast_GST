# -*- coding: utf-8 -*-
"""
Created on Sat Jun  6 18:01:32 2020

@author: 网络连接中断
"""

def C(i):
    if i==1:
        return C_1
    elif i==2:
        return C_2
    elif i==3:
        return C_3
    elif i==4:
        return C_4
    elif i==5:
        return C_5
    elif i==6:
        return C_6
    elif i==7:
        return C_7


from sympy import *
x = Symbol('x')
y = Symbol('y')
print (solve([x**2 - y - 3, 3 * x + y - 7],[x, y]))




def C_ideal(i):
    if i==1:
        return C_1_ideal
    elif i==2:
        return C_2_ideal
    elif i==3:
        return C_3_ideal
    elif i==4:
        return C_4_ideal
    elif i==5:
        return C_5_ideal
    elif i==6:
        return C_6_ideal
    elif i==7:
        return C_7_ideal


def zuhe_noise(i,j,k,l):
    return np.matmul(C(i),np.matmul(C(j),np.matmul(C(k),C(l))))

def zuhe_ideal(i,j,k,l):
    return np.matmul(C_ideal(i),np.matmul(C_ideal(j),np.matmul(C_ideal(k),C_ideal(l))))

def eqa4_i(i,j,k,l):
    X=np.matmul(np.matmul(C_ideal(j+1),C_ideal(k+1)),C_ideal(l+1))
    U=[]
    p=0
    while p<81:
        if p==i*9+0:
           U.append(X[0,0])
        elif p==i*9+1:
            U.append(X[0,1])
        elif p==i*9+2:
            U.append(X[0,2])
        elif p==i*9+3:
            U.append(X[1,0])
        elif p==i*9+4:
            U.append(X[1,1])
        elif p==i*9+5:
            U.append(X[1,2])
        elif p==i*9+6:
            U.append(X[2,0])
        elif p==i*9+7:
            U.append(X[2,1])
        elif p==i*9+8:
            U.append(X[2,2])
        else:
            U.append(0)
        p=p+1
    return U
def eqa4_j(i,j,k,l):
    X=np.matmul(np.matmul(C_ideal(k+1),C_ideal(l+1)),C_ideal(i+1))
    I=[]
    p=0
    while p<81:
        if p==j*9+0:
           I.append(X[0,0])
        elif p==j*9+1:
            I.append(X[0,1])
        elif p==j*9+2:
            I.append(X[0,2])
        elif p==j*9+3:
            I.append(X[1,0])
        elif p==j*9+4:
            I.append(X[1,1])
        elif p==j*9+5:
            I.append(X[1,2])
        elif p==j*9+6:
            I.append(X[2,0])
        elif p==j*9+7:
            I.append(X[2,1])
        elif p==j*9+8:
            I.append(X[2,2])
        else:
            I.append(0)
        p=p+1
    return I

def eqa4_k(i,j,k,l):
    X=np.matmul(np.matmul(C_ideal(l+1),C_ideal(i+1)),C_ideal(j+1))
    O=[]
    p=0
    while p<81:
        if p==k*9+0:
           O.append(X[0,0])
        elif p==k*9+1:
            O.append(X[0,1])
        elif p==k*9+2:
            O.append(X[0,2])
        elif p==k*9+3:
            O.append(X[1,0])
        elif p==k*9+4:
            O.append(X[1,1])
        elif p==k*9+5:
            O.append(X[1,2])
        elif p==k*9+6:
            O.append(X[2,0])
        elif p==k*9+7:
            O.append(X[2,1])
        elif p==k*9+8:
            O.append(X[2,2])
        else:
            O.append(0)
        p=p+1
    return O



def eqa4_l(i,j,k,l):
    X=np.matmul(np.matmul(C_ideal(i+1),C_ideal(j+1)),C_ideal(k+1))
    P=[]
    p=0
    while p<81:
        if p==l*9+0:
           P.append(X[0,0])
        elif p==l*9+1:
            P.append(X[0,1])
        elif p==l*9+2:
            P.append(X[0,2])
        elif p==l*9+3:
            P.append(X[1,0])
        elif p==l*9+4:
            P.append(X[1,1])
        elif p==l*9+5:
            P.append(X[1,2])
        elif p==l*9+6:
            P.append(X[2,0])
        elif p==l*9+7:
            P.append(X[2,1])
        elif p==l*9+8:
            P.append(X[2,2])
        else:
            P.append(0)
        p=p+1
    return P


Y_1=[]
U=[]
I=[]
O=[]
P=[]
c_1=[]


for raw in range (0,100):
    i=equa_set[raw][0]-1
    j=equa_set[raw][1]-1
    k=equa_set[raw][2]-1
    l=equa_set[raw][3]-1
    U.extend(eqa4_i(i,j,k,l))
    I.extend(eqa4_j(i,j,k,l))
    O.extend(eqa4_k(i,j,k,l))
    P.extend(eqa4_l(i,j,k,l))
    Y_1.append(equa_right_meas(zuhe_noise(i+1,j+1,k+1,l+1),zuhe_ideal(i+1,j+1,k+1,l+1)))
    c_1.append(trace_measure(zuhe_noise(i+1,j+1,k+1,l+1),zuhe_ideal(i+1,j+1,k+1,l+1))-np.trace(zuhe_noise(i+1,j+1,k+1,l+1)))
    #Y.append(measure(i+1,j+1,k+1,l+1))
    #print(raw,c[-1],Y[-1])
for i in range(0,100):
    if np.abs(c[i])<np.abs(c_1[i]):
        #print(i,c[i])
        Y[i]=Y[i]
    else:
        Y[i]=Y_1[i]
        c[i]=c_1[i]
        #print(i,c_1[i])



D_1=[U[i]+I[i]+O[i]+P[i] for i in range (0,len(U))] 
b=len(D_1)/81
s=int(b)    
D=np.array(D_1)
D=D.reshape(s,81)
for i in range(0,18):
    D=np.delete(D,-1,axis=1)
B=np.linalg.pinv(D)
T,E,V=np.linalg.svd(B)
rank=np.linalg.matrix_rank(B)

A_0=np.array([[1,0,0],[0,0,0],[0,0,0]])
A_1=np.array([[0,0,0],[1,0,0],[0,0,0]])
A_2=np.array([[0,0,0],[0,0,0],[1,0,0]])
A_3=np.array([[0,1,0],[0,0,0],[0,0,0]])
A_4=np.array([[0,0,0],[0,1,0],[0,0,0]])
A_5=np.array([[0,0,0],[0,0,0],[0,1,0]])
A_6=np.array([[0,0,1],[0,0,0],[0,0,0]])
A_7=np.array([[0,0,0],[0,0,1],[0,0,0]])
A_8=np.array([[0,0,0],[0,0,0],[0,0,1]])


def A(i):
    if i==0:
        return A_0
    elif i==1:
          return A_1
    elif i==2:
          return A_2
    elif i==3:
          return A_3
    elif i==4:
          return A_4
    elif i==5:
          return A_5
    elif i==6:
          return A_6
    elif i==7:
          return A_7
    elif i==8:
          return A_8
      





def C_measure(i):
    Z=np.matmul(B,Y)
    Z=[Z[j] for j in range(9*(i-1),9*i)]
    D_4=np.array([[0,0,0],[0,0,0],[0,0,0]])
    for j in range(9):
        D_4=D_4+Z[j]*A(j)
    M=(C_ideal(i)+D_4)
    return M


t13=(C_measure(5)-C(5)+C_measure(6)-C(6))[0,0]/2
t23=(C_measure(5)-C(5)+C_measure(6)-C(6))[1,0]/2
t12=-(C_measure(5)-C(5)+C_measure(6)-C(6))[2,1]/2
t21=(C_measure(3)-C(3)+C_measure(7)-C(7))[2,0]/2
t32=-(C_measure(6)-C(6)+C_measure(2)-C(2))[2,2]/2
t31=(C_measure(6)-C(6)+C_measure(2)-C(2))[1,0]/2
t22=0
t33=(C_measure(6)-C(6)+C_measure(2)-C(2))[1,2]/2
t11=-(C_measure(4)-C(4)+C_measure(3)-C(3))[1,0]/2
t=np.array([[t11,t12,t13],[t21,t22,t23],[t31,t32,t33]])
i=1
C_measure(i)-C(i)-np.matmul(t,C_ideal(i))+np.matmul(C_ideal(i),t)
C_ideal(i)-C(i)
