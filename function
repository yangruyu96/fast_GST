# -*- coding: utf-8 -*-
"""
Created on Sat Jun  6 15:55:22 2020

@author: 网络连接中断
"""
import numpy as np
import math
import scipy as sc;
import scipy.linalg as la
import matplotlib.pyplot as plt
from scipy.optimize import leastsq
from scipy.optimize import minimize
from pylab import *
from scipy.optimize import curve_fit
from scipy.optimize import fmin_l_bfgs_b
from scipy.optimize import fmin
import random










def different_eigenvalues(x1,x2,x3,k,sp_value,dishu):
    global b_s_new
    global a_s_new
    global c_s_new
    y_another=[]
    variance=[]
    for i in list(np.arange(0,k+1,1)):
        sample_real=[]
        sample_imag=[]
        forward_1=[]
        forward_2=[]
        n=dishu**i
        n=find_exp(n,sp_value)
        print(n)
        d1=(x1**n+x2**n+x3**n).real#+np.random.randn()/100
        d2=(x1**(2*n)+x2**(2*n)+x3**(2*n)).real#+np.random.randn()/100
        d3=(x1**(3*n)+x2**(3*n)+x3**(3*n)).real#+np.random.randn()/100
        b=d1/3+(1-(3**(1/2))*1j)*(18*(d1**2)-54*d2)/(18*(2**(2/3))*((432*(d1**3)-1944*d1*d2+1944*d3+(4*(18*(d1**2)-54*d2)**3+(432*(d1**3)-1944*d1*d2+1944*d3)**2)**(1/2)))**(1/3))-(1+(3**(1/2))*1j)*(1/(36*(2**(1/3))))*((432*(d1**3)-1944*d1*d2+1944*d3+(4*((18*(d1**2)-54*d2)**3)+(432*(d1**3)-1944*d1*d2+1944*d3)**2)**(1/2))**(1/3))
        a=d1/3-(18*(d1**2)-54*d2)/(9*(2**(2/3))*((432*(d1**3)-1944*d1*d2+1944*d3+(4*(18*(d1**2)-54*d2)**3+(432*(d1**3)-1944*d1*d2+1944*d3)**2)**(1/2)))**(1/3))+(1/(18*(2**(1/3))))*((432*(d1**3)-1944*d1*d2+1944*d3+(4*((18*(d1**2)-54*d2)**3)+(432*(d1**3)-1944*d1*d2+1944*d3)**2)**(1/2))**(1/3))
        c=d1/3+(1+(3**(1/2))*1j)*(18*(d1**2)-54*d2)/(18*(2**(2/3))*((432*(d1**3)-1944*d1*d2+1944*d3+(4*(18*(d1**2)-54*d2)**3+(432*(d1**3)-1944*d1*d2+1944*d3)**2)**(1/2)))**(1/3))-(1-(3**(1/2))*1j)*(1/(36*(2**(1/3))))*((432*(d1**3)-1944*d1*d2+1944*d3+(4*((18*(d1**2)-54*d2)**3)+(432*(d1**3)-1944*d1*d2+1944*d3)**2)**(1/2))**(1/3))
        a_s=a**(1/n)
        b_s=b**(1/n)
        c_s=c**(1/n)

        '''
        a_0,b_0,c_0=symbols('a_0,b_0,c_0')
        x=solve([a_0+b_0+c_0-d1,a_0**2+b_0**2+c_0**2-d2,a_0**3+b_0**3+c_0**3-d3],[a_0,b_0,c_0])
        a=complex(x[0][0])
        b=complex(x[0][1])
        c=complex(x[0][2])
        a_s=a**(1/n)
        b_s=b**(1/n)
        c_s=c**(1/n)
        '''
        #print(n,a,b,c)
        if i>0 and len(y_another)>0:
            #print(y_another)
            if np.abs(c.conjugate()-b)<0.01:
                #print(a,b,c)
                for m in range(0,n):
                    forward_1.append(np.abs(b_s*complex(exp(2j*math.pi*m/n))-y_another[-1]))
                for m in range(0,n):
                    forward_2.append(np.abs(c_s*complex(exp(2j*math.pi*m/n))-y_another[-1]))
                #print(forward_1)
                if min(forward_1)<min(forward_2):
                    position=forward_1.index(min(forward_1))
                    b_s_new=b_s*complex(exp(2j*math.pi*position/n))
                    c_s_new=c_s*complex(exp(-2j*math.pi*position/n))
                    a_s_new=np.abs(a_s)
                else:
                    position=forward_2.index(min(forward_2))
                    c_s_new=c_s*complex(exp(2j*math.pi*position/n))
                    b_s_new=b_s*complex(exp(-2j*math.pi*position/n))
                    a_s_new=np.abs(a_s)
                y_another.append(b_s_new)
                #print(a_s_new,b_s_new,c_s_new)
            elif np.abs(a.conjugate()-b)<0.01:
                #print(a,b,c)
                for m in range(0,n):
                    forward_1.append(np.abs(b_s*complex(exp(2j*math.pi*m/n))-y_another[-1]))
                for m in range(0,n):
                    forward_2.append(np.abs(a_s*complex(exp(2j*math.pi*m/n))-y_another[-1]))
                #print(forward_1)
                if min(forward_1)<min(forward_2):
                    position=forward_1.index(min(forward_1))
                    b_s_new=b_s*complex(exp(2j*math.pi*position/n))
                    a_s_new=a_s*complex(exp(-2j*math.pi*position/n))
                    c_s_new=np.abs(c_s)
                else:
                    position=forward_2.index(min(forward_2))
                    a_s_new=a_s*complex(exp(2j*math.pi*position/n))
                    b_s_new=b_s*complex(exp(-2j*math.pi*position/n))
                    c_s_new=np.abs(c_s)
                y_another.append(b_s_new)
                #print(a_s_new,b_s_new,c_s_new)
            elif np.abs(a.conjugate()-c)<0.01:
                #print(a,b,c)
                for m in range(0,n):
                    forward_1.append(np.abs(a_s*complex(exp(2j*math.pi*m/n))-y_another[-1]))
                for m in range(0,n):
                    forward_2.append(np.abs(c_s*complex(exp(2j*math.pi*m/n))-y_another[-1]))
                #print(forward_1)
                if min(forward_1)<min(forward_2):
                    position=forward_1.index(min(forward_1))
                    a_s_new=a_s*complex(exp(2j*math.pi*position/n))
                    c_s_new=c_s*complex(exp(-2j*math.pi*position/n))
                    b_s_new=np.abs(b_s)
                else:
                    position=forward_2.index(min(forward_2))
                    c_s_new=c_s*complex(exp(2j*math.pi*position/n))
                    a_s_new=a_s*complex(exp(-2j*math.pi*position/n))
                    b_s_new=np.abs(b_s)
                y_another.append(a_s_new)
                #print(a_s_new,b_s_new,c_s_new)
        elif i == 0 and len(y_another) == 0:
         #error.append(b_s+a_s+c_s)
            if np.abs(c.conjugate()-b)<0.01:
                b_s_new=b_s
                c_s_new=c_s
                a_s_new=np.abs(a_s)
                y_another.append(b_s_new)
            if np.abs(a.conjugate()-b)<0.01:
                b_s_new=b_s
                a_s_new=a_s
                c_s_new=np.abs(c_s)
                y_another.append(b_s_new)
            if np.abs(a.conjugate()-c)<0.01:
                a_s_new=a_s
                c_s_new=c_s
                b_s_new=np.abs(b_s)
                y_another.append(a_s_new)
            #print(a_s_new,b_s_new,c_s_new)
        elif i>0 and len(y_another)==0:
            pass
    #print(a_s_new,b_s_new,c_s_new,x1,x2,x3)
    return b_s_new+c_s_new+a_s_new
    #return y_another



def find_exp(x,sp_value):
    #print(x,sp_value)
    n=(sp_value-1)*math.floor(x/(sp_value-1))+1
    return n



M=np.array([[1,0,0],[0,0,0.9],[0,1,0]])

def error_rate(X,Y):
    Y = (Y.T).conjugate()
    return 1-(np.trace(np.matmul(X,Y)) + 2 + 1)/6

def find_sp(a):
    for i in range(3,100):
        if np.abs(a[0]**i-a[0])<0.2 and np.abs(a[1]**i-a[1])<0.2:
            #print(i)
            return i



        #elif i>30:
            #return 10


def chengfa(a,b,c,d):
    return np.matmul(np.matmul(np.matmul(a,b),c),d)

def trace_measure(M_noise,M_ideal,M_ideal_0,m,dishu,re_times=0):
    #n=int(0.4/(np.abs(error_rate(M_noise,M_ideal_0))))
    n = 100
    #n = 10**re_times
    #print(error_rate(M_noise,M_ideal))
    #print(n)
    a,b=np.linalg.eig(M_noise)
    #print(a)
    a_i,b_i=np.linalg.eig(M_ideal)
    sp_value=find_sp(a_i)
    if m > 13:
        dishu = dishu
        m=math.floor(math.log(n,dishu))
        #m = re_times
    elif m==13:
        dishu = dishu
        m=math.floor(math.log(n,dishu))
        #m = re_times
    elif m>7:
        dishu = dishu
        m=math.floor(math.log(n,dishu)) 
    else:
        dishu = dishu
        m=math.floor(math.log(n,dishu)) 
        #print(m)
    trace=different_eigenvalues(a[0],a[1],a[2],m,sp_value,dishu)
    return trace

def equa_right_meas(M_noise,M_ideal,M_ideal_0,n,dishu,re_times=0):
    return trace_measure(M_noise,M_ideal,M_ideal_0,n,dishu)-np.trace(M_ideal_0)
'''
C_1_ideal=np.array([[1/2,(3**(1/2))/2,0],[-(3**(1/2))/2,1/2,0],[0,0,1]])
C_9=np.array([[0,0,-1],[1,0,0],[0,-1,0]])
C_9_noise=np.array([[0,0,-0.999],[0.999,0,0],[0,-0.999,0]])
error_rate(C(3),C_ideal(3))
trace_measure(zuhe_noise(5,2,3,6),zuhe_ideal(5,2,3,6))-np.trace(zuhe_noise(5,2,3,6))
measure(1,4,7,6)+np.trace(zuhe_ideal(1,4,7,6))-np.trace(zuhe_noise(1,4,7,6))
np.trace(zuhe_noise(1,5,1,6))
a,b=np.linalg.eig(C(1))
find_sp(a)
a,b=np.linalg.eig(zuhe_ideal(1,4,7,7))
equa_right_meas(zuhe_noise(2,2,2,2),zuhe_ideal(2,2,2,2))
'''






