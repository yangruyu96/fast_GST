import matplotlib.pyplot as plt
import numpy as np
from numpy import random
import math
from scipy.linalg import expm
from scipy.linalg import pinv
from tqdm import tqdm
import xlwt
def P(i,k,h):
    y=0
    for j in range(1,4):
        for l in range(1,4):
            x1=np.trace(np.matmul(np.matmul(np.matmul(A(j),A(i)),A(l)),A(k)))
            x2=np.trace(np.matmul(np.matmul(np.matmul(A(j),A(l)),A(i)),A(k)))
            x3=np.trace(np.matmul(np.matmul(np.matmul(A(i),A(j)),A(l)),A(k)))
            y=y+h[j-1,l-1]*(x1-(1/2)*(x2+x3))
    return y
#这个函数把开系统那一项携程ptm形式
def H_PTM(i,k,H,p):
    x=np.matmul(H,A(i))-np.matmul(A(i),H)
    #x=np.matmul(np.matmul(expm(1j*H*p),A(i)),expm(-1j*H*p))
    return np.trace(np.matmul(x,A(k)))
def M_PTM(i,k,M):
    x=np.matmul(np.matmul(M,A(i)),(M.T).conjugate())
    return np.trace(np.matmul(x,A(k)))
def A(i):
    if i==0:
        return np.array([[1,0],[0,1]])
    elif i==1:
        return np.array([[0,1],[1,0]])
    elif i==2:
        return np.array([[0,-1j],[1j,0]])
    elif i==3:
        return np.array([[1,0],[0,-1]])

I_3 = np.array([[1,0,0],[0,1,0],[0,0,1]])
I_2 = np.array([[1,0],[0,1]])

def gen_SPAM(k,i):
    np.random.seed(1)
    h1 = np.array([[np.abs(random.randn()), 0, 0], [0, np.abs(random.randn()), 0], [0, 0, np.abs(random.randn())]])
    h2 = random.randn(3, 3)
    h3 = random.randn(3, 3) * 1j  # j就是python的虚数单位
    h4 = h2 + h3
    T, E, V = np.linalg.svd(h4)  # 目的是找一个酉变换
    h_0 = np.matmul(np.matmul(T, h1), np.linalg.inv(T))   # 得到一个正定的h
    H1 = random.randn(2, 2)
    H2 = random.randn(2, 2) * 1j
    H = H1 + H2
    H = (H + (H.T).conjugate())
    np.random.seed(10*k+i)
    h1 = np.array([[np.abs(random.randn()), 0, 0], [0, np.abs(random.randn()), 0], [0, 0, np.abs(random.randn())]])
    h2 = random.randn(3, 3)
    h3 = random.randn(3, 3) * 1j  # j就是python的虚数单位
    h4 = h2 + h3
    T, E, V = np.linalg.svd(h4)  # 目的是找一个酉变换
    h = np.matmul(np.matmul(T, h1), np.linalg.inv(T))/100 + h_0# 得到一个正定的h
    H1 = random.randn(2, 2)
    H2 = random.randn(2, 2) * 1j
    H_new = H1 + H2
    H_new = (H_new + (H_new.T).conjugate())/100 + H  # 生成一个Hermitian matrix，代表Hamiltonian
    L = np.zeros((4, 4))
    for i in range(0, 4):
        for j in range(0, 4):
            L[i, j] = P(i,j,h)
            # 得到h的ptm
    #p = 0.01 # 一个极短的演化时间
    H_0 = np.zeros((4, 4))
    for i in range(0, 4):
        for j in range(0, 4):
            H_0[i, j] = -1j * H_PTM(i, j, H_new, p) / 2
    # 得到-iH的ptm，自然单位制。
    q = expm(H_0 * p *100 + L * p)
    print(q)
    return q


a_ideal = np.loadtxt(r"C:\Users\yangruyu\Desktop\gate1_ideal")
C_ideal = np.reshape(a_ideal,(7,4,4))
workbook = xlwt.Workbook(encoding = 'utf-8')
def error_rate(X,Y):
    return 1-(np.trace(np.matmul(X,(Y.T).conjugate())) - 1 )/3


for k in range(15):
    p = 10 ** (-5.5 - k/5)
    worksheet = workbook.add_sheet('{}'.format(k), cell_overwrite_ok=True)
    for i in range(7):
        S = gen_SPAM(k,i)
        x = np.matmul(S,C_ideal[i,:,:])
        a = error_rate(x,C_ideal[i,:,:])
        h,l = x.shape
        for h_0 in range(h):
            for l_0 in range(l):
                worksheet.write(4*i+h_0,l_0,x[h_0,l_0])

workbook.save('gate_1.xls')
